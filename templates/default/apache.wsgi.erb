import os
from logging.config import fileConfig as loggingFileConfig

config_filepath = os.path.join(
    os.path.dirname(os.path.abspath(__file__)), 'production.ini')
loggingFileConfig(config_filepath)

activate_this = os.path.join('/usr/lib/ckan/default/bin/activate_this.py')
execfile(activate_this, dict(__file__=activate_this))

try:
    from ckan.config.middleware import make_app
    from ckan.cli import CKANConfigLoader
    use_flask = True
except ImportError:
    from paste.deploy import loadapp
    use_flask = False

if use_flask:
    abspath = os.path.join(os.path.dirname(os.path.abspath(__file__)))
    config = CKANConfigLoader(config_filepath).get_config()
    application = make_app(config)
else:
    application = loadapp('config:%s' % config_filepath)

# Add raven Sentry client middleware to the stack if sentryurl provided
#
<% if node['datashades']['ckan_web']['sentryurl'].length > 0 -%>
from raven import Client
from raven.middleware import Sentry
client = Client("<%= node['datashades']['ckan_web']['sentryurl'] %>", tags={"<%= node['datashades']['version'] %>"})
application = Sentry(application, client=client)
# ensure 404s are redirected to a page that looks nice,
from pylons.middleware import StatusCodeRedirect
application = StatusCodeRedirect(application , [400, 404, 500])
<% else -%>
#from raven import Client
#from raven.middleware import Sentry
#client = Client("<insert sentryurl>", tags={"<%= node['datashades']['version'] %>"})
#application = Sentry(application, client=client)
# ensure 404s are redirected to a page that looks nice,
#from pylons.middleware import StatusCodeRedirect
#application = StatusCodeRedirect(application , [400, 404, 500])
<% end -%>
