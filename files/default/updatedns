#!/bin/bash

echo "Refreshing DNS"

metadata_token=$(curl -X PUT -H "X-aws-ec2-metadata-token-ttl-seconds: 60" http://169.254.169.254/latest/api/token)
placement=$(curl -H "X-aws-ec2-metadata-token: $metadata_token" http://169.254.169.254/latest/meta-data/placement/availability-zone)
region=$(echo ${placement%?})

myid=$(curl -H "X-aws-ec2-metadata-token: $metadata_token" http://169.254.169.254/latest/meta-data/instance-id)
zone_id=$(aws ec2 describe-tags --region $region --filters "Name=resource-id,Values=${myid}" "Name=key,Values=ZoneId" | jq '.Tags[].Value' | tr -d '"')
if [ -z $zone_id ] && [ -e /etc/awszoneid ]; then
	zone_id=$(cat /etc/awszoneid | grep zoneid | cut -d'=' -f 2)
fi

if [ -z $zone_id ]; then
	echo "No AWS Zone ID configured"
	exit 0;
fi

config_file=/etc/hostnames

function update_dns
{
    local dns_name=$1
	local dns_type=$2

	# Retrieve the canonical hostname from EC2 metadata.
	# Eg ip-1.2.3.4.us-east-1.compute.internal
	local instance_hostname=$(curl -H "X-aws-ec2-metadata-token: $metadata_token" http://169.254.169.254/latest/meta-data/hostname)

	# Retrieve the base DNS record value for this instance, if any.
	# This should match the instance hostname (if not, we'll change it).
	local currec=$(aws route53 list-resource-record-sets --hosted-zone-id ${zone_id} --query "ResourceRecordSets[?contains(Name, '${dns_name}')].ResourceRecords[0].Value" | jq '.[0]' | tr -d '"')

	# We always need a base DNS record for the failover records to point to, so always create it.
	# Eg foo1.dev.ckan.internal pointing to ip-1.2.3.4.us-east-1.compute.internal
	#
	if [ "${instance_hostname}" != "${currec}" ]; then
		aws route53 change-resource-record-sets --hosted-zone-id ${zone_id} --change-batch file://<(cat <<-EOF
			{"Changes": [
				{"Action": "UPSERT", "ResourceRecordSet": {
					"Name": "$dns_name", "Type": "CNAME", "TTL": 60,
					"ResourceRecords": [{"Value": "$instance_hostname"}]
				}}
			]}
		EOF
		)
	fi

	# Create a cluster node Alias record based on record type.
	# Eg foo.dev.ckan.internal PRIMARY foo1.dev.ckan.internal
	# SECONDARY foo2.dev.ckan.internal
	#
	name=`echo ${dns_name} | cut -d'.' -f 1`
	alias=`printf '%s\n' "${dns_name//[[:digit:]]/}" | cut -d'.' -f 1`
	tld=`echo ${dns_name} | cut -d'.' -f 2-`

	if [[ "${dns_type}" == *"_master"*  ]]; then
		failover_type=PRIMARY
	elif [[ "${dns_type}" == *"_slave"*  ]]; then
		failover_type=SECONDARY
	fi
	if [ "$failover_type" != "" ]; then
		# check whether the alias record is already correct
		local alias_rec=$(aws route53 list-resource-record-sets --hosted-zone-id ${zone_id} --query "ResourceRecordSets[?contains(Name, '${alias}.${tld}') && contains(Failover, '${failover_type}')][AliasTarget.DNSName][0]" | jq '.[0]' | tr -d '"' | sed 's/[.]$//')
		if [ "${name}.${tld}" != "${alias_rec}" ]; then
			aws route53 change-resource-record-sets --hosted-zone-id ${zone_id} --change-batch file://<(cat <<-EOF
				{"Changes": [
					{"Action": "UPSERT", "ResourceRecordSet": {
						"Name": "${alias}.${tld}", "Type": "CNAME",
						"SetIdentifier": "${dns_type}", "Failover": "${failover_type}",
						"AliasTarget": {
							"HostedZoneId": "${zone_id}", "DNSName": "${name}.${tld}",
							"EvaluateTargetHealth":true
						}
					}}
				]}
			EOF
			)
		fi
	fi

}

function update_hostname
{
	local dns_name=$1

	if [ ! -z ${dns_name} ]; then
	    if [ ! hostname == $dns_name ]; then
#		    echo "Updating hostname to $dns_name"
			hostname $dns_name
	    fi

		update_dns $1
	fi
}


i=0
while read line; do
	if [[ "$line" =~ ^[^#]*= ]]; then
		name[i]=`echo $line | cut -d'=' -f 1`
		value[i]=`echo $line | cut -d'=' -f 2 | tr '[A-Z]' '[a-z]'` # ensure that hostnames are lowercase or the lookup can fail
		((i++))
	fi
done < ${config_file}

i=0
for varname in "${name[@]}"
	do
		if [ ${varname} = "dns_name" ]; then
			update_hostname ${value[i]}
		else
			update_dns ${value[i]} ${name[i]}
		fi
		((i++))
	done

exit 0
